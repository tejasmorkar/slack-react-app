{"version":3,"sources":["components/ColorPanel/ColorPanel.js","firebase.js","components/SidePanel/UserPanel.js","components/SidePanel/Channels.js","components/SidePanel/SidePanel.js","components/MetaPanel/MetaPanel.js","components/Messages/Messages.js","components/App.js","components/Auth/Login.js","components/Auth/Register.js","serviceWorker.js","reducers/index.js","actions/types.js","components/Spinner/Spinner.js","index.js","actions/index.js"],"names":["ColorPanel","react_default","a","createElement","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","UserPanel","state","user","_this","props","currentUser","dropdownOptions","key","text","onClick","handleSignout","displayName","auth","signOut","then","console","log","this","Grid","style","background","Column","Row","padding","margin","Header","inverted","float","as","Icon","name","Content","Dropdown","trigger","Image","scr","photoURL","spaced","avatar","options","Channels","Menu","paddingBottom","SidePanel","size","fixed","vertical","fontSize","SidePanel_UserPanel","SidePanel_Channels","MetaPanel","Messages","App","columns","className","components_ColorPanel_ColorPanel","components_SidePanel_SidePanel","marginLeft","components_Messages_Messages","width","components_MetaPanel_MetaPanel","connect","Login","email","password","errors","loading","displayErrors","map","error","i","message","handleChange","event","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","isFormValid","signInWithEmailAndPassword","signedInUser","catch","err","concat","_ref","handleInputError","inputName","some","toLowerCase","includes","_this$state","textAlign","verticalAlign","maxWidth","icon","color","Form","onSubmit","Segment","stacked","Input","fluid","iconPosition","placeholder","type","onChange","Button","disabled","length","Message","react_router_dom","to","Register","username","passwordConfirmation","usersRef","database","ref","isFormEmpty","isPasswordValid","_ref2","createUserWithEmailAndPassword","createdUser","updateProfile","md5","saveUser","child","uid","set","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialUserState","isLoading","rootReducer","combineReducers","arguments","undefined","action","payload","objectSpread","Spinner","Dimmer","active","Loader","content","store","createStore","composeWithDevTools","Root","onAuthStateChanged","setUser","history","push","clearUser","components_Spinner_Spinner","react_router","exact","path","component","RootWithAuth","withRouter","ReactDOM","render","es","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9adec97f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ColorPanel extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        ColorPanel\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorPanel;\r\n","import firebase from 'firebase/app';\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport \"firebase/storage\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyD81kC17Zu4SSuUDeUFwH4aH5B4wpIQh0k\",\r\n    authDomain: \"slack-react-app-ed83e.firebaseapp.com\",\r\n    databaseURL: \"https://slack-react-app-ed83e.firebaseio.com\",\r\n    projectId: \"slack-react-app-ed83e\",\r\n    storageBucket: \"slack-react-app-ed83e.appspot.com\",\r\n    messagingSenderId: \"104999919466\",\r\n    appId: \"1:104999919466:web:3f6118eea74c3c05\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from 'react';\r\nimport firebase from '../../firebase';\r\nimport { Grid, Header, Icon, Dropdown, Image } from 'semantic-ui-react';\r\n\r\nclass UserPanel extends Component {\r\n    state = {\r\n        user: this.props.currentUser\r\n    }\r\n    \r\n    dropdownOptions = () => [\r\n        {\r\n            key: \"avatar\",\r\n            text: <span>Change Avatar</span>\r\n        },\r\n        {\r\n            key: \"signout\",\r\n            text: <span onClick={this.handleSignout}>Not <strong>{this.state.user.displayName}?</strong> Sign Out</span>\r\n        }\r\n    ]\r\n\r\n    handleSignout = () => {\r\n        firebase\r\n            .auth()\r\n            .signOut()\r\n            .then(() => console.log(`Signed Out`));\r\n    }\r\n\r\n  render () {\r\n    const { user } = this.state;\r\n\r\n    return (\r\n      <Grid style={{ background: '4c3c4c' }} >\r\n        <Grid.Column>\r\n            <Grid.Row style={{ padding: '1.2em', margin: 0 }} >\r\n                {/* App Header */}\r\n                <Header inverted float=\"left\" as=\"h2\" >\r\n                    <Icon name=\"code\" />\r\n                    <Header.Content>\r\n                        DevChat\r\n                    </Header.Content>\r\n                </Header>\r\n                {/* User Dropdown */}\r\n                <Header style={{ padding: '0.25em' }} as=\"h4\" inverted >\r\n                    <Dropdown trigger={\r\n                        <span>\r\n                            <Image scr={user.photoURL} spaced=\"right\" avatar />\r\n                            {user.displayName}\r\n                        </span>\r\n                    } options={this.dropdownOptions()} />\r\n                </Header>\r\n            </Grid.Row>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserPanel;\r\n","import React, { Component } from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\nclass Channels extends Component {\r\n  render () {\r\n    return (\r\n      <Menu.Menu style={{ paddingBottom: '2em' }} >\r\n\r\n      </Menu.Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Channels;\r\n","import React, { Component } from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport UserPanel from './UserPanel';\r\nimport Channels from './Channels';\r\n\r\nclass SidePanel extends Component {\r\n  render () {\r\n    const {currentUser} = this.props;\r\n\r\n    return (\r\n      <Menu\r\n        size=\"large\"\r\n        inverted\r\n        fixed=\"left\"\r\n        vertical\r\n        style={{ background: '#4c3c4c', fontSize: '1.2em' }}\r\n      >\r\n\r\n        <UserPanel currentUser={currentUser} />\r\n\r\n        <Channels />\r\n\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SidePanel;\r\n","import React, { Component } from 'react';\r\n\r\nclass MetaPanel extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        MetaPanel\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MetaPanel;\r\n","import React, { Component } from 'react';\r\n\r\nclass Messages extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        Messages\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Messages;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { Grid } from 'semantic-ui-react';\nimport ColorPanel from './ColorPanel/ColorPanel';\nimport SidePanel from './SidePanel/SidePanel';\nimport MetaPanel from './MetaPanel/MetaPanel';\nimport Messages from './Messages/Messages';\n\nclass App extends Component {\n  render () {\n    const { currentUser } = this.props;\n\n    return (\n      <Grid columns=\"equal\" className=\"app\"  >\n\n        <ColorPanel />\n\n        <SidePanel currentUser={currentUser} />\n\n        <Grid.Column style={{ marginLeft: 320 }}>\n          <Messages />\n        </Grid.Column>\n\n        <Grid.Column width={4}>\n          <MetaPanel />\n        </Grid.Column>\n        \n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.user.currentUser\n})\n\nexport default connect(mapStateToProps)(App);\n","import React, { Component } from 'react';\r\nimport { Grid, Form, Segment, Button, Header, Message, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        errors: [],\r\n        loading: false\r\n    };\r\n\r\n    displayErrors = (errors) => errors.map((error, i) => <p key={i}> {error.message} </p>);\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (this.isFormValid(this.state)){\r\n            this.setState({ errors: [], loading: true })\r\n            firebase\r\n                .auth()\r\n                .signInWithEmailAndPassword(this.state.email, this.state.password)\r\n                .then(signedInUser => {\r\n                    console.log(signedInUser);\r\n                    this.setState({ loading: false });\r\n                })\r\n                .catch(err => {\r\n                    console.error(err);\r\n                    this.setState({ errors: this.state.errors.concat(err), loading: false });\r\n                })\r\n        }\r\n    };\r\n\r\n    isFormValid = ({ email, password }) => email && password;\r\n\r\n    handleInputError = (errors, inputName) => {\r\n        return errors.some(error => error.message.toLowerCase().includes(inputName)) ? \"error\" : \"\";\r\n    }\r\n\r\n  render () {\r\n    const { email, password, errors, loading } = this.state;\r\n\r\n    return (\r\n      <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\r\n        <Grid.Column style={{maxWidth: 450}}>\r\n            <Header as=\"h1\" icon color=\"violet\" textAlign=\"center\">\r\n                <Icon name=\"code branch\" color=\"violet\" />\r\n                Login to DevChat\r\n            </Header>\r\n            <Form onSubmit={this.handleSubmit} size=\"large\">\r\n                <Segment stacked> \r\n                    <Form.Input \r\n                        fluid name=\"email\" \r\n                        icon=\"mail\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Email Address\" \r\n                        type=\"email\"\r\n                        onChange={this.handleChange} \r\n                        value={email}\r\n                        className={this.handleInputError(errors, \"email\")}\r\n                    />\r\n\r\n                    <Form.Input \r\n                        fluid name=\"password\" \r\n                        icon=\"lock\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Password\" \r\n                        type=\"password\"\r\n                        onChange={this.handleChange} \r\n                        value={password}\r\n                        className={this.handleInputError(errors, \"password\")}\r\n                    />\r\n\r\n                    <Button className={loading ? 'loading': '' } disabled={loading} color=\"violet\" fluid size=\"large\">Submit</Button>\r\n                </Segment>\r\n            </Form>\r\n            {errors.length > 0 && (\r\n                <Message error>\r\n                    <h3>Error</h3>\r\n                    {this.displayErrors(errors)}\r\n                </Message>\r\n            )}\r\n            <Message>Don't have an account? <Link to=\"/register\">Register</Link> </Message>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Grid, Form, Segment, Button, Header, Message, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\nimport md5 from 'md5';\r\n\r\nclass Register extends Component {\r\n    state = {\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        passwordConfirmation: '',\r\n        errors: [],\r\n        loading: false,\r\n        usersRef: firebase.database().ref('users')\r\n    };\r\n\r\n    isFormValid = () => {\r\n        let errors = [];\r\n        let error;\r\n\r\n        if (this.isFormEmpty(this.state)) {\r\n            //throw error\r\n            error = { message: 'Fill in all fields' };\r\n            this.setState({ errors: errors.concat(error) });\r\n            return false;\r\n        } else if (!this.isPasswordValid(this.state)) {\r\n            //throw error\r\n            error = { message: 'Password is invalid' };\r\n            this.setState({ errors: errors.concat(error) });\r\n            return false;\r\n        } else {\r\n            //form valid\r\n            return true;\r\n        }\r\n    }\r\n\r\n    displayErrors = (errors) => errors.map((error, i) => <p key={i}> {error.message} </p>);\r\n\r\n    isFormEmpty = ({ username, email, password, passwordConfirmation }) => {\r\n        return !username.length || !email.length || !password.length || !passwordConfirmation.length;\r\n    }\r\n\r\n    isPasswordValid = ({ password, passwordConfirmation }) => {\r\n        if (password.length < 6 || passwordConfirmation.length < 6) {\r\n            return false;\r\n        } else if (password !== passwordConfirmation) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (this.isFormValid()){\r\n            this.setState({ errors: [], loading: true })\r\n            firebase\r\n                .auth()\r\n                .createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n                .then(createdUser => {\r\n                    console.log(createdUser);\r\n                    createdUser.user.updateProfile({\r\n                        displayName: this.state.username,\r\n                        photoURL: `https://gravatar.com/avatar/${md5(createdUser.user.email)}?d=identicon`\r\n                    })\r\n                    .then(() => {\r\n                        this.saveUser(createdUser).then(() => {\r\n                            this.setState({ loading: false });\r\n                        })\r\n                    })\r\n                    .catch(err => {\r\n                        this.setState({ errors: this.state.errors.concat(err), loading: false });\r\n                    })\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    this.setState({ errors: this.state.errors.concat(err), loading: false });\r\n                })\r\n        }\r\n    }\r\n\r\n    saveUser = (createdUser) => {\r\n        return this.state.usersRef.child(createdUser.user.uid).set({\r\n            name: createdUser.user.displayName,\r\n            avatar: createdUser.user.photoURL\r\n        });\r\n    }\r\n\r\n    handleInputError = (errors, inputName) => {\r\n        return errors.some(error => error.message.toLowerCase().includes(inputName)) ? \"error\" : \"\";\r\n    }\r\n\r\n  render () {\r\n    const { username, email, password, passwordConfirmation, errors, loading } = this.state;\r\n\r\n    return (\r\n      <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\r\n        <Grid.Column style={{maxWidth: 450}}>\r\n            <Header as=\"h1\" icon color=\"orange\" textAlign=\"center\">\r\n                <Icon name=\"puzzle piece\" color=\"orange\" />\r\n                Register For DevChat\r\n            </Header>\r\n            <Form onSubmit={this.handleSubmit} size=\"large\">\r\n                <Segment stacked> \r\n                    <Form.Input \r\n                        fluid name=\"username\" \r\n                        icon=\"user\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Username\" \r\n                        type=\"text\"\r\n                        onChange={this.handleChange} \r\n                        value={username}\r\n                        className={this.handleInputError(errors, \"username\")}\r\n                    />\r\n\r\n                    <Form.Input \r\n                        fluid name=\"email\" \r\n                        icon=\"mail\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Email Address\" \r\n                        type=\"email\"\r\n                        onChange={this.handleChange} \r\n                        value={email}\r\n                        className={this.handleInputError(errors, \"email\")}\r\n                    />\r\n\r\n                    <Form.Input \r\n                        fluid name=\"password\" \r\n                        icon=\"lock\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Password\" \r\n                        type=\"password\"\r\n                        onChange={this.handleChange} \r\n                        value={password}\r\n                        className={this.handleInputError(errors, \"password\")}\r\n                    />\r\n\r\n                    <Form.Input \r\n                        fluid name=\"passwordConfirmation\" \r\n                        icon=\"repeat\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Password Confirmation\" \r\n                        type=\"password\"\r\n                        onChange={this.handleChange}\r\n                        value={passwordConfirmation} \r\n                        className={this.handleInputError(errors, \"password\")}\r\n                    />\r\n\r\n                    <Button className={loading ? 'loading': '' } disabled={loading} color=\"orange\" fluid size=\"large\">Submit</Button>\r\n                </Segment>\r\n            </Form>\r\n            {errors.length > 0 && (\r\n                <Message error>\r\n                    <h3>Error</h3>\r\n                    {this.displayErrors(errors)}\r\n                </Message>\r\n            )}\r\n            <Message>Already a User? <Link to=\"/login\">Login</Link> </Message>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport * as actionTypes from '../actions/types';\r\n\r\nconst initialUserState = {\r\n    currentUser: null,\r\n    isLoading: true\r\n}\r\n\r\nconst user_reducer = (state = initialUserState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER: \r\n            return {\r\n                currentUser: action.payload.currentUser,\r\n                isLoading: false\r\n            }\r\n        case actionTypes.CLEAR_USER:\r\n            return {\r\n                ...initialUserState,\r\n                isLoading: false\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    user: user_reducer\r\n});\r\n\r\nexport default rootReducer;\r\n","export const SET_USER = 'SET_USER';\r\n\r\nexport const CLEAR_USER = 'CLEAR_USER';","import React, { Component } from 'react';\r\nimport { Loader, Dimmer } from 'semantic-ui-react';\r\n\r\nclass Spinner extends Component {\r\n  render () {\r\n    return (\r\n        <Dimmer active>\r\n            <Loader size=\"huge\" content={\"Preparing your chats...\"} />\r\n        </Dimmer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from './firebase';\n\nimport { BrowserRouter as Router, Switch, Route, withRouter } from 'react-router-dom';\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\nimport { setUser, clearUser } from './actions';\nimport Spinner from './components/Spinner/Spinner';\n\nconst store = createStore( rootReducer, composeWithDevTools());\n\nclass Root extends Component {\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged(user => {\n            if (user) {\n                this.props.setUser(user);\n                this.props.history.push('/');\n            } else {\n                this.props.history.push('/login');\n                this.props.clearUser();\n            }\n        })\n    }\n\n    render () {\n        return this.props.isLoading ? <Spinner /> : (\n                <Switch>\n                    <Route exact path=\"/\" component={App} />\n                    <Route path=\"/login\" component={Login} />\n                    <Route path=\"/register\" component={Register} />\n                </Switch>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isLoading: state.user.isLoading\n});\n\nconst RootWithAuth = withRouter(connect(mapStateToProps, { setUser, clearUser })(Root));\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <RootWithAuth />\n        </Router>\n    </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import * as actionTypes from './types';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: actionTypes.SET_USER,\r\n        payload: {\r\n            currentUser: user\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearUser = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_USER\r\n    }\r\n}\r\n"],"sourceRoot":""}