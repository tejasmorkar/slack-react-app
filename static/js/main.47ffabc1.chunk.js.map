{"version":3,"sources":["components/App.js","firebase.js","components/Auth/Login.js","components/Auth/Register.js","serviceWorker.js","reducers/index.js","actions/types.js","index.js","actions/index.js"],"names":["App","react_default","a","createElement","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","state","email","password","errors","loading","displayErrors","map","error","i","key","message","handleChange","event","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","isFormValid","auth","signInWithEmailAndPassword","then","signedInUser","console","log","catch","err","concat","_ref","handleInputError","inputName","some","toLowerCase","includes","_this$state","this","Grid","textAlign","verticalAlign","className","Column","style","maxWidth","Header","as","icon","color","Icon","Form","onSubmit","size","Segment","stacked","Input","fluid","iconPosition","placeholder","type","onChange","Button","disabled","length","Message","react_router_dom","to","Register","username","passwordConfirmation","usersRef","database","ref","isFormEmpty","isPasswordValid","_ref2","createUserWithEmailAndPassword","createdUser","user","updateProfile","displayName","photoURL","md5","saveUser","child","uid","set","avatar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialUserState","currentUser","isLoading","rootReducer","combineReducers","arguments","undefined","action","payload","store","createStore","composeWithDevTools","Root","onAuthStateChanged","props","setUser","history","push","react_router","exact","path","component","RootWithAuth","withRouter","connect","ReactDOM","render","es","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.47ffabc1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        App\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import firebase from 'firebase/app';\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport \"firebase/storage\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyD81kC17Zu4SSuUDeUFwH4aH5B4wpIQh0k\",\r\n    authDomain: \"slack-react-app-ed83e.firebaseapp.com\",\r\n    databaseURL: \"https://slack-react-app-ed83e.firebaseio.com\",\r\n    projectId: \"slack-react-app-ed83e\",\r\n    storageBucket: \"slack-react-app-ed83e.appspot.com\",\r\n    messagingSenderId: \"104999919466\",\r\n    appId: \"1:104999919466:web:3f6118eea74c3c05\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Grid, Form, Segment, Button, Header, Message, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        errors: [],\r\n        loading: false\r\n    };\r\n\r\n    displayErrors = (errors) => errors.map((error, i) => <p key={i}> {error.message} </p>);\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (this.isFormValid(this.state)){\r\n            this.setState({ errors: [], loading: true })\r\n            firebase\r\n                .auth()\r\n                .signInWithEmailAndPassword(this.state.email, this.state.password)\r\n                .then(signedInUser => {\r\n                    console.log(signedInUser);\r\n                    this.setState({ loading: false });\r\n                })\r\n                .catch(err => {\r\n                    console.error(err);\r\n                    this.setState({ errors: this.state.errors.concat(err), loading: false });\r\n                })\r\n        }\r\n    };\r\n\r\n    isFormValid = ({ email, password }) => email && password;\r\n\r\n    handleInputError = (errors, inputName) => {\r\n        return errors.some(error => error.message.toLowerCase().includes(inputName)) ? \"error\" : \"\";\r\n    }\r\n\r\n  render () {\r\n    const { email, password, errors, loading } = this.state;\r\n\r\n    return (\r\n      <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\r\n        <Grid.Column style={{maxWidth: 450}}>\r\n            <Header as=\"h1\" icon color=\"violet\" textAlign=\"center\">\r\n                <Icon name=\"code branch\" color=\"violet\" />\r\n                Login to DevChat\r\n            </Header>\r\n            <Form onSubmit={this.handleSubmit} size=\"large\">\r\n                <Segment stacked> \r\n                    <Form.Input \r\n                        fluid name=\"email\" \r\n                        icon=\"mail\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Email Address\" \r\n                        type=\"email\"\r\n                        onChange={this.handleChange} \r\n                        value={email}\r\n                        className={this.handleInputError(errors, \"email\")}\r\n                    />\r\n\r\n                    <Form.Input \r\n                        fluid name=\"password\" \r\n                        icon=\"lock\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Password\" \r\n                        type=\"password\"\r\n                        onChange={this.handleChange} \r\n                        value={password}\r\n                        className={this.handleInputError(errors, \"password\")}\r\n                    />\r\n\r\n                    <Button className={loading ? 'loading': '' } disabled={loading} color=\"violet\" fluid size=\"large\">Submit</Button>\r\n                </Segment>\r\n            </Form>\r\n            {errors.length > 0 && (\r\n                <Message error>\r\n                    <h3>Error</h3>\r\n                    {this.displayErrors(errors)}\r\n                </Message>\r\n            )}\r\n            <Message>Don't have an account? <Link to=\"/register\">Register</Link> </Message>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Grid, Form, Segment, Button, Header, Message, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\nimport md5 from 'md5';\r\n\r\nclass Register extends Component {\r\n    state = {\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        passwordConfirmation: '',\r\n        errors: [],\r\n        loading: false,\r\n        usersRef: firebase.database().ref('users')\r\n    };\r\n\r\n    isFormValid = () => {\r\n        let errors = [];\r\n        let error;\r\n\r\n        if (this.isFormEmpty(this.state)) {\r\n            //throw error\r\n            error = { message: 'Fill in all fields' };\r\n            this.setState({ errors: errors.concat(error) });\r\n            return false;\r\n        } else if (!this.isPasswordValid(this.state)) {\r\n            //throw error\r\n            error = { message: 'Password is invalid' };\r\n            this.setState({ errors: errors.concat(error) });\r\n            return false;\r\n        } else {\r\n            //form valid\r\n            return true;\r\n        }\r\n    }\r\n\r\n    displayErrors = (errors) => errors.map((error, i) => <p key={i}> {error.message} </p>);\r\n\r\n    isFormEmpty = ({ username, email, password, passwordConfirmation }) => {\r\n        return !username.length || !email.length || !password.length || !passwordConfirmation.length;\r\n    }\r\n\r\n    isPasswordValid = ({ password, passwordConfirmation }) => {\r\n        if (password.length < 6 || passwordConfirmation.length < 6) {\r\n            return false;\r\n        } else if (password !== passwordConfirmation) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (this.isFormValid()){\r\n            this.setState({ errors: [], loading: true })\r\n            firebase\r\n                .auth()\r\n                .createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n                .then(createdUser => {\r\n                    console.log(createdUser);\r\n                    createdUser.user.updateProfile({\r\n                        displayName: this.state.username,\r\n                        photoURL: `https://gravatar.com/avatar/${md5(createdUser.user.email)}?d=identicon`\r\n                    })\r\n                    .then(() => {\r\n                        this.saveUser(createdUser).then(() => {\r\n                            this.setState({ loading: false });\r\n                        })\r\n                    })\r\n                    .catch(err => {\r\n                        this.setState({ errors: this.state.errors.concat(err), loading: false });\r\n                    })\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    this.setState({ errors: this.state.errors.concat(err), loading: false });\r\n                })\r\n        }\r\n    }\r\n\r\n    saveUser = (createdUser) => {\r\n        return this.state.usersRef.child(createdUser.user.uid).set({\r\n            name: createdUser.user.displayName,\r\n            avatar: createdUser.user.photoURL\r\n        });\r\n    }\r\n\r\n    handleInputError = (errors, inputName) => {\r\n        return errors.some(error => error.message.toLowerCase().includes(inputName)) ? \"error\" : \"\";\r\n    }\r\n\r\n  render () {\r\n    const { username, email, password, passwordConfirmation, errors, loading } = this.state;\r\n\r\n    return (\r\n      <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\r\n        <Grid.Column style={{maxWidth: 450}}>\r\n            <Header as=\"h1\" icon color=\"orange\" textAlign=\"center\">\r\n                <Icon name=\"puzzle piece\" color=\"orange\" />\r\n                Register For DevChat\r\n            </Header>\r\n            <Form onSubmit={this.handleSubmit} size=\"large\">\r\n                <Segment stacked> \r\n                    <Form.Input \r\n                        fluid name=\"username\" \r\n                        icon=\"user\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Username\" \r\n                        type=\"text\"\r\n                        onChange={this.handleChange} \r\n                        value={username}\r\n                        className={this.handleInputError(errors, \"username\")}\r\n                    />\r\n\r\n                    <Form.Input \r\n                        fluid name=\"email\" \r\n                        icon=\"mail\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Email Address\" \r\n                        type=\"email\"\r\n                        onChange={this.handleChange} \r\n                        value={email}\r\n                        className={this.handleInputError(errors, \"email\")}\r\n                    />\r\n\r\n                    <Form.Input \r\n                        fluid name=\"password\" \r\n                        icon=\"lock\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Password\" \r\n                        type=\"password\"\r\n                        onChange={this.handleChange} \r\n                        value={password}\r\n                        className={this.handleInputError(errors, \"password\")}\r\n                    />\r\n\r\n                    <Form.Input \r\n                        fluid name=\"passwordConfirmation\" \r\n                        icon=\"repeat\" \r\n                        iconPosition=\"left\" \r\n                        placeholder=\"Password Confirmation\" \r\n                        type=\"password\"\r\n                        onChange={this.handleChange}\r\n                        value={passwordConfirmation} \r\n                        className={this.handleInputError(errors, \"password\")}\r\n                    />\r\n\r\n                    <Button className={loading ? 'loading': '' } disabled={loading} color=\"orange\" fluid size=\"large\">Submit</Button>\r\n                </Segment>\r\n            </Form>\r\n            {errors.length > 0 && (\r\n                <Message error>\r\n                    <h3>Error</h3>\r\n                    {this.displayErrors(errors)}\r\n                </Message>\r\n            )}\r\n            <Message>Already a User? <Link to=\"/login\">Login</Link> </Message>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport * as actionTypes from '../actions/types';\r\n\r\nconst initialUserState = {\r\n    currentUser: null,\r\n    isLoading: true\r\n}\r\n\r\nconst user_reducer = (state = initialUserState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER: \r\n            return {\r\n                currentUser: action.payload.currentUser,\r\n                isLoading: false\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    user: user_reducer\r\n});\r\n\r\nexport default rootReducer;\r\n","export const SET_USER = 'SET_USER';","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from './firebase';\n\nimport { BrowserRouter as Router, Switch, Route, withRouter } from 'react-router-dom';\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\nimport { setUser } from './actions';\n\nconst store = createStore( rootReducer, composeWithDevTools());\n\nclass Root extends Component {\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged(user => {\n            if (user) {\n                this.props.setUser(user);\n                this.props.history.push('/');\n            }\n        })\n    }\n\n    render () {\n        return (\n                <Switch>\n                    <Route exact path=\"/\" component={App} />\n                    <Route path=\"/login\" component={Login} />\n                    <Route path=\"/register\" component={Register} />\n                </Switch>\n        );\n    }\n}\n\nconst RootWithAuth = withRouter(connect(null, { setUser })(Root));\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <RootWithAuth />\n        </Router>\n    </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import * as actionTypes from './types';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: actionTypes.SET_USER,\r\n        payload: {\r\n            currentUser: user\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}